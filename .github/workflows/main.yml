name: Deploy WordPress and MySQL to Amazon ECS

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    name: Deploy WordPress and MySQL to ECS
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ECR_REPOSITORY_WORDPRESS: wordpress-ecr-repo
      ECR_REPOSITORY_MYSQL: mysql-ecr-repo
      ECS_SERVICE: wordpress-ecs-service
      ECS_CLUSTER: wordpress-ecs-cluster
      ECS_TASK_FAMILY: wordpress-task-family
      ECS_CONTAINER_NAME_WORDPRESS: wordpress-container
      ECS_CONTAINER_NAME_MYSQL: mysql-container
      MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
      MYSQL_DATABASE: wordpress_db
      MYSQL_USER: wordpress_user
      MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0

    - name: Terraform Init
      run: terraform init

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan
      run: terraform plan
      env:
        TF_VAR_aws_access_key: ${{ secrets.DEPLOY_AWS_ACCESS_KEY_ID }}
        TF_VAR_aws_secret_key: ${{ secrets.DEPLOY_AWS_SECRET_ACCESS_KEY }}

    - name: Terraform Apply
      run: terraform apply --var-file terraform.tfvars -auto-approve
      env:
        TF_VAR_aws_access_key: ${{ secrets.DEPLOY_AWS_ACCESS_KEY_ID }}
        TF_VAR_aws_secret_key: ${{ secrets.DEPLOY_AWS_SECRET_ACCESS_KEY }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.DEPLOY_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.DEPLOY_AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Pull Docker Hub images
      run: |
        docker pull wordpress:latest
        docker pull mysql:latest

    - name: Tag and push Docker images to Amazon ECR
      run: |
        # Tag and push WordPress image
        docker tag wordpress:latest ${{ steps.login-ecr.outputs.registry }}/wordpress:latest
        docker push ${{ steps.login-ecr.outputs.registry }}/wordpress:latest

        # Tag and push MySQL image
        docker tag mysql:latest ${{ steps.login-ecr.outputs.registry }}/mysql:latest
        docker push ${{ steps.login-ecr.outputs.registry }}/mysql:latest

    - name: Download current ECS task definition
      run: |
        aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_FAMILY }} \
        --query taskDefinition > task-definition.json

    - name: Update ECS task definition with new images and environment variables
      id: render-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ env.ECS_CONTAINER_NAME_WORDPRESS }}
        image: ${{ steps.login-ecr.outputs.registry }}/wordpress:latest
        environment: |
          [
            {
              "name": "WORDPRESS_DB_HOST",
              "value": "mysql-container"
            },
            {
              "name": "WORDPRESS_DB_NAME",
              "value": "${{ env.MYSQL_DATABASE }}"
            },
            {
              "name": "WORDPRESS_DB_USER",
              "value": "${{ env.MYSQL_USER }}"
            },
            {
              "name": "WORDPRESS_DB_PASSWORD",
              "value": "${{ env.MYSQL_PASSWORD }}"
            }
          ]
        
    - name: Update ECS task definition with MySQL image and environment variables
      id: render-task-def-mysql
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ steps.render-task-def.outputs.task-definition }}
        container-name: ${{ env.ECS_CONTAINER_NAME_MYSQL }}
        image: ${{ steps.login-ecr.outputs.registry }}/mysql:latest
        environment: |
          [
            {
              "name": "MYSQL_ROOT_PASSWORD",
              "value": "${{ env.MYSQL_ROOT_PASSWORD }}"
            },
            {
              "name": "MYSQL_DATABASE",
              "value": "${{ env.MYSQL_DATABASE }}"
            },
            {
              "name": "MYSQL_USER",
              "value": "${{ env.MYSQL_USER }}"
            },
            {
              "name": "MYSQL_PASSWORD",
              "value": "${{ env.MYSQL_PASSWORD }}"
            }
          ]

    - name: Deploy ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.render-task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
