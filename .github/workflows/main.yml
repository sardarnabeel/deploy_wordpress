name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      destroy:
        description: "Trigger Terraform destroy"
        required: true
        default: "false"
permissions:
      id-token: write
      contents: read

jobs:
  deploy:
    if: github.event.inputs.destroy != 'true'  # Skip this job if destroy is requested
    name: Deploy
    runs-on: ubuntu-latest
    # environment: production
    env:
      # AWS_REGION: us-west-2                
      ECR_REPOSITORY: my-ecr-repo        
      ECS_SERVICE: my-ecs-service              
      ECS_CLUSTER: my-ecs-cluster       
      ECS_CONTAINER_DEFINITION: my-task-family
      ECS_CONTAINER_NAME: my-container
      # AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}
    
     
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0

    - name: Terraform Init
      run: terraform init

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan
      run: terraform plan -out=tfplan
      env:
        TF_VAR_access_key: ${{ secrets.DEPLOY_AWS_ACCESS_KEY_ID }}
        TF_VAR_secret_key: ${{ secrets.DEPLOY_AWS_SECRET_ACCESS_KEY }}
        # AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        # AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Terraform Apply
      # run: terraform apply --var-file terraform.tfvars -auto-approve
      run: terraform apply  -auto-approve tfplan
      env:
        TF_VAR_access_key: ${{ secrets.DEPLOY_AWS_ACCESS_KEY_ID }}
        TF_VAR_secret_key: ${{ secrets.DEPLOY_AWS_SECRET_ACCESS_KEY }}
        # AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        # AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.DEPLOY_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.DEPLOY_AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
    - name: Download task definition
      run: |
          aws ecs describe-task-definition --task-definition ${{ env.ECS_CONTAINER_DEFINITION }} \
          --query taskDefinition > task-definition.json

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
          task-definition: task-definition.json
          container-name: ${{ env.ECS_CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
  destroy:
    if: github.event.inputs.destroy == 'true'  # Trigger this job if destroy is requested
    name: Destroy
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up AWS credentials for Terraform
        env:
          TF_VAR_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_region: "us-west-2"
        run: terraform init

      - name: Terraform Destroy
        env:
          TF_VAR_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_region: "us-west-2"
        run: terraform destroy --var-file=terraform.tfvars -auto-approve
